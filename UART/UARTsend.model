<!DOCTYPE Robei>
<Module Color="#f5f5dc" Y="0" Width="1024" File="Current/UARTsend.model" Comment="" Type="module" Class="module" Name="UARTsend" Code="&#xa;/*    capture the rising edge of TransEn    */&#xa;reg [7:0] cnt; &#xa;reg TransEn_r;&#xa;wire pos_tri;&#xa;always@(posedge clk16x or negedge rst_n)&#xa;begin&#xa;    if(!rst_n)&#xa;        TransEn_r &lt;= 1'b0;&#xa;    else&#xa;        TransEn_r &lt;= TransEn;&#xa;end&#xa;assign pos_tri = ~TransEn_r &amp; TransEn;&#xa;&#xa;/*&#xa;*    when the rising edge of DataEn comes up, load the Data to buffer&#xa;*/&#xa;reg [7:0] ShiftReg;&#xa;always@(posedge pos_tri or negedge rst_n)&#xa;begin&#xa;    if(!rst_n)&#xa;        ShiftReg &lt;= 8'b0;&#xa;    else&#xa;        ShiftReg &lt;= DataToTrans;&#xa;end&#xa;//----------------------------------------------    &#xa;/*     counter control      */&#xa;reg cnt_en;&#xa;always@(posedge clk16x or negedge rst_n)&#xa;begin&#xa;    if(!rst_n)&#xa;        begin&#xa;            cnt_en  &lt;= 1'b0;&#xa;            BufFull &lt;= 1'b0;&#xa;        end&#xa;    else if(pos_tri==1'b1)&#xa;        begin&#xa;            cnt_en  &lt;=1'b1;&#xa;            BufFull &lt;=1'b1;&#xa;        end&#xa;    else if(cnt==8'd160)&#xa;        begin&#xa;            cnt_en&lt;=1'b0;&#xa;            BufFull &lt;=1'b0;&#xa;        end&#xa;end&#xa;&#xa;//---------------------------------------------&#xa;/*      counter module        */&#xa;&#xa;always@(posedge clk16x or negedge rst_n)&#xa;begin&#xa;    if(!rst_n)&#xa;        cnt&lt;=8'd0;&#xa;    else if(cnt_en)&#xa;        cnt&lt;=cnt+1;&#xa;    else&#xa;        cnt&lt;=8'd0;&#xa;end&#xa;&#xa;//---------------------------------------------&#xa;/*      transmit module        */&#xa;&#xa;always@(posedge clk16x or negedge rst_n)&#xa;begin&#xa;    if(!rst_n)&#xa;        begin&#xa;            tx &lt;= 1'b1;&#xa;        end&#xa;    else if(cnt_en)&#xa;        case(cnt)&#xa;            8'd0   :  tx &lt;= 1'b0;&#xa;            8'd16  :  tx &lt;= ShiftReg[0];&#xa;            8'd32  :  tx &lt;= ShiftReg[1];&#xa;            8'd48  :  tx &lt;= ShiftReg[2];&#xa;            8'd64  :  tx &lt;= ShiftReg[3];&#xa;            8'd80  :  tx &lt;= ShiftReg[4];&#xa;            8'd96  :  tx &lt;= ShiftReg[5];&#xa;            8'd112 :  tx &lt;= ShiftReg[6];&#xa;            8'd128 :  tx &lt;= ShiftReg[7];&#xa;            8'd144 :  tx &lt;= 1'b1;&#xa;        endcase&#xa;    else&#xa;        tx &lt;= 1'b1;&#xa;end&#xa;&#xa;&#xa;&#xa;&#xa;" Height="720" Parameters="" X="0" Parent="0">
 <Port Color="#faebd7" Y="0.155556" Width="20" Name="clk16x" Inout="input" Side="left" Height="20" Function="transmit clock,16Ã—115200" Datasize="1" Datatype="wire" X="-0.0195313" Parent="UARTsend"/>
 <Port Color="#00ffff" Y="0.322222" Width="20" Name="rst_n" Inout="input" Side="left" Height="20" Function="global reset signal " Datasize="1" Datatype="wire" X="-0.0195313" Parent="UARTsend"/>
 <Port Color="#7fffd4" Y="0.488889" Width="20" Name="TransEn" Inout="input" Side="left" Height="20" Function=" transmit enable   " Datasize="1" Datatype="wire" X="-0.0195313" Parent="UARTsend"/>
 <Port Color="#f0ffff" Y="0.655556" Width="20" Name="DataToTrans" Inout="input" Side="left" Height="20" Function="Data prepared for transmitting" Datasize="8" Datatype="wire" X="-0.0195313" Parent="UARTsend"/>
 <Port Color="#cd853f" Y="0.238889" Width="20" Name="BufFull" Inout="output" Side="right" Height="20" Function="Data buffer is full" Datasize="1" Datatype="reg" X="0.980469" Parent="UARTsend"/>
 <Port Color="#ffe4c4" Y="0.488889" Width="20" Name="tx" Inout="output" Side="right" Height="20" Function="serial data out " Datasize="1" Datatype="reg" X="0.980469" Parent="UARTsend"/>
</Module>
